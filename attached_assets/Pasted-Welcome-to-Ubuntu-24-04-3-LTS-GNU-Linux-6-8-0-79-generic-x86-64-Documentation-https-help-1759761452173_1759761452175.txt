Welcome to Ubuntu 24.04.3 LTS (GNU/Linux 6.8.0-79-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Mon Oct  6 14:31:12 UTC 2025

  System load:  0.47              Processes:             116
  Usage of /:   8.2% of 47.39GB   Users logged in:       0
  Memory usage: 16%               IPv4 address for eth0: 72.60.210.231
  Swap usage:   0%                IPv6 address for eth0: 2a02:4780:5e:b64c::1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


1 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

*** System restart required ***
Last login: Mon Oct  6 14:22:12 2025 from 169.254.0.1
root@srv1047995:~# cd /var/www/expense-tracker
root@srv1047995:/var/www/expense-tracker# grep -n "^export" server/telegram-bot.ts | head -10
root@srv1047995:/var/www/expense-tracker# head -100 server/telegram-bot.ts | tail -50
async function processUpdates() {
  if (!botStorage) return;

  const updates = await getUpdates();

  for (const update of updates) {
    lastUpdateId = update.update_id;

    try {
      if (update.message && update.message.text) {
        const chatId = update.message.chat.id.toString();
        const text = update.message.text;
        await handleTextMessage(chatId, text, botStorage);
      }

      if (update.callback_query) {
        const callbackQuery = update.callback_query;
        
        // Check if callback_query has valid structure
        if (!callbackQuery.message || !callbackQuery.message.chat) {
          console.log('[Telegram Bot] Invalid callback query structure, skipping');
          continue;
        }
        
        const chatId = callbackQuery.message.chat.id.toString();
        const messageDate = callbackQuery.message.date;
        const now = Math.floor(Date.now() / 1000);
        
        // Skip callback queries older than 60 seconds
        if (now - messageDate > 60) {
          console.log('[Telegram Bot] Skipping old callback query (age: ' + (now - messageDate) + 's)');
          try {
            await answerCallbackQuery(callbackQuery.id, 'This button has expired');
          } catch (e) {
            // Ignore errors when answering old queries
          }
          continue;
        }
        
        // Process the callback query
        await handleCallbackQuery(callbackQuery, chatId, botStorage);
      }
    } catch (error) {
      console.error('[Telegram Bot] Error processing update:', error);
      // Continue processing other updates even if one fails
    }
  }
}
root@srv1047995:/var/www/expense-tracker# ls -la server/telegram-bot.ts*
-rw-r--r-- 1 root root 1638 Oct  6 14:29 server/telegram-bot.ts
-rw-r--r-- 1 root root 7890 Oct  6 14:07 server/telegram-bot.ts.backup
root@srv1047995:/var/www/expense-tracker# grep "from './telegram-bot'" server/*.ts
server/telegram-ai.ts:import { sendTelegramMessage, createInlineKeyboard, createMainMenu } from './telegram-bot';
server/telegram-bot-handlers.ts:import { sendTelegramMessage, answerCallbackQuery, sendTelegramDocument } from './telegram-bot';
server/telegram-bot-menus.ts:import { sendTelegramMessage, answerCallbackQuery, createInlineKeyboard, sendTelegramDocument } from './telegram-bot';
server/telegram-notifications.ts:import { sendTelegramMessage } from './telegram-bot';
root@srv1047995:/var/www/expense-tracker# grep "^export" server/telegram-bot.ts.backup | head -15
export async function setWebhook(webhookSecret?: string): Promise<boolean> {
export async function getWebhookInfo(): Promise<any> {
export async function initializeTelegramBot(storage: IStorage) {
export async function sendTelegramMessage(chatId: number | string, text: string, replyMarkup?: InlineKeyboardMarkup): Promise<boolean> {
export async function answerCallbackQuery(callbackQueryId: string, text?: string): Promise<boolean> {
export function createInlineKeyboard(buttons: InlineKeyboardButton[][]): InlineKeyboardMarkup {
export function createMainMenu(): InlineKeyboardMarkup {
export async function sendTelegramDocument(
export async function stopTelegramBot() {
export async function restartTelegramBot(storage: IStorage) {
export function isBotRunning(): boolean {
root@srv1047995:/var/www/expense-tracker# cp server/telegram-bot.ts.backup server/telegram-bot.ts
root@srv1047995:/var/www/expense-tracker# cp server/telegram-bot.ts.backup server/telegram-bot.ts
root@srv1047995:/var/www/expense-tracker# cat > /tmp/fix-telegram-bot.sh << 'EOF'
#!/bin/bash
cat > server/telegram-bot.ts << 'BOTEOF'
import type { IStorage } from './storage';
import { handleTextMessage, handleCallbackQuery } from './telegram-bot-handlers';

interface TelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'Markdown' | 'HTML';
  reply_markup?: InlineKeyboardMarkup;
}

interface InlineKeyboardMarkup {
  inline_keyboard: InlineKeyboardButton[][];
}

interface InlineKeyboardButton {
  text: string;
  callback_data: string;
}

let botToken: string | null = null;
let pollingInterval: NodeJS.Timeout | null = null;
let lastUpdateId = 0;
let botStorage: IStorage | null = null;

async function getUpdates(): Promise<any[]> {
  if (!botToken) return [];

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/getUpdates?offset=${lastUpdateId + 1}&timeout=30`
    );

    if (!response.ok) {
      console.error('[Telegram Bot] Failed to get updates');
/tmp/fix-telegram-bot.sham-bot.shnfo() { return null; }age) {rror);rData);sendDocument`, {spreadsheetml.sheet' : 'application/octet-stream' 
root@srv1047995:/var/www/expense-tracker# 