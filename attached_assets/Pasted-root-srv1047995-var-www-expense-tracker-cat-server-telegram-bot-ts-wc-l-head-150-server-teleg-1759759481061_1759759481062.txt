root@srv1047995:/var/www/expense-tracker# cat server/telegram-bot.ts | wc -l
head -150 server/telegram-bot.ts
293
import type { IStorage } from './storage';

interface TelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'Markdown' | 'HTML';
  reply_markup?: InlineKeyboardMarkup;
}

interface InlineKeyboardMarkup {
  inline_keyboard: InlineKeyboardButton[][];
}

interface InlineKeyboardButton {
  text: string;
  callback_data: string;
}

let botToken: string | null = null;

function getWebhookUrl(): string | null {
  const appUrl = process.env.APP_URL;
  if (appUrl) {
    const baseUrl = appUrl.replace(/\/$/, '');
    return `${baseUrl}/api/integrations/telegram/webhook`;
  }
  
  const replitDomains = process.env.REPLIT_DOMAINS;
  if (replitDomains) {
    const domains = replitDomains.split(',');
    const primaryDomain = domains[0];
    return `https://${primaryDomain}/api/integrations/telegram/webhook`;
  }
  
  console.error('[Telegram Bot] APP_URL or REPLIT_DOMAINS environment variable not found');
  return null;
}

export async function setWebhook(webhookSecret?: string): Promise<boolean> {
  if (!botToken) {
    console.log('[Telegram Bot] Cannot set webhook - bot not configured');
    return false;
  }

  const webhookUrl = getWebhookUrl();
  if (!webhookUrl) {
    console.error('[Telegram Bot] Cannot set webhook - invalid webhook URL');
    return false;
  }

  try {
    const payload: { url: string; secret_token?: string } = {
      url: webhookUrl,
    };

    if (webhookSecret) {
      payload.secret_token = webhookSecret;
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('[Telegram Bot] Failed to set webhook:', errorData);
      return false;
    }

    const data = await response.json();
    console.log('[Telegram Bot] Webhook set successfully:', webhookUrl);
    return data.ok;
  } catch (error) {
    console.error('[Telegram Bot] Error setting webhook:', error);
    return false;
  }
}

export async function getWebhookInfo(): Promise<any> {
  if (!botToken) {
    console.log('[Telegram Bot] Cannot get webhook info - bot not configured');
    return null;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('[Telegram Bot] Failed to get webhook info:', errorData);
      return null;
    }

    const data = await response.json();
    return data.result;
  } catch (error) {
    console.error('[Telegram Bot] Error getting webhook info:', error);
    return null;
  }
}

export async function initializeTelegramBot(storage: IStorage) {
  try {
    const config = await storage.getTelegramBotConfig();
    
    if (!config || !config.isEnabled || !config.botToken) {
      console.log('[Telegram Bot] Bot is not enabled or token is missing');
      botToken = null;
      return;
    }

    botToken = config.botToken;
    console.log('[Telegram Bot] Bot configured successfully');
    
    await setWebhook(config.webhookSecret || undefined);
    
    const webhookInfo = await getWebhookInfo();
    if (webhookInfo) {
      console.log('[Telegram Bot] Webhook info:', JSON.stringify(webhookInfo, null, 2));
    }
  } catch (error) {
    console.error('[Telegram Bot] Failed to initialize bot:', error);
    botToken = null;
  }
}

export async function sendTelegramMessage(chatId: number | string, text: string, replyMarkup?: InlineKeyboardMarkup): Promise<boolean> {
  if (!botToken) {
    console.log('[Telegram Bot] Cannot send message - bot not configured');
    return false;
  }

  try {
    const message: TelegramMessage = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
    };

    if (replyMarkup) {
      message.reply_markup = replyMarkup;
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
root@srv1047995:/var/www/expense-tracker# 